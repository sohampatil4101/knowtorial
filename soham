select customer.cid , payment.pamount
from customer ,payment,tour
where customer.cid=payment.pid and tour.cid=customer.cid
-----------
select customer.cname ,SUM(tour.total) as 'total sales'
from customer,tour
where tour.cid=customer.cid
group by customer.cname
-------------------
select p.productname,  t.quarter, b.branchname, sum(s.total_sales) as 'total sales', sum(s.total_profit) as 'profit' 
from product p, sales s, time t, branch b
where p.productid= s.prod_id and t.timeid = s.timeid and b.branchid = s.branchid
group by p.productname, t.quarter, b.branchname
--------------------------
select t.year, sum(s.total_sales) as 'total sales'
from sales s, time t
where t.timeid = s.timeid 
group by t.year
**************************************
PRE-PROCESS
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
dataset = pd.read_csv("Data.csv")
x= dataset.iloc[:,:-1].values
y= dataset.iloc[:,-1].values
print(y)
print(x)
print(dataset)
from sklearn.impute import SimpleImputer
imputer = SimpleImputer(missing_values=np.nan, strategy='mean')
imputer.fit(x[:,1:3])
x[:,1:3]=imputer.transform(x[:,1:3])
print(x)
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import OneHotEncoder
ct = ColumnTransformer(transformers=[('encoder', OneHotEncoder(), [0])], remainder='passthrough')
x = np.array(ct.fit_transform(x))
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
y = np.array(le.fit_transform(y))
print(y)
dataset['Age'].describe()
from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(x, y, test_size = 0.2, random_state = 1)
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
x_train[:, 3:] = sc.fit_transform(x_train[:, 3:])
x_test[:, 3:] = sc.transform(x_test[:, 3:])
print(x_test)
from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
classifier.fit(x_train, y_train)
x_predict = np.array(x_test[:,:])
print(classifier.predict((x_predict)))
accuracy = classifier.score(x_test,y_test)
print(accuracy)
print(y_test)
**************************************************
TREE
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
dataset = pd.read_csv('data_class.csv')
X = dataset.iloc[:, :-1].values
y = dataset.iloc[:, -1].values
from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)\
print(X_train)
print(y_train)
print(X_test)
print(y_test)
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X_train = sc.fit_transform(X_train)
X_test = sc.transform(X_test)
print(X_train)
print(X_test)
from sklearn.tree import DecisionTreeClassifier
classifier = DecisionTreeClassifier(criterion = 'entropy', random_state = 0)
classifier.fit(X_train, y_train)
print(classifier.predict(sc.transform([[50,87000]])))
y_pred = classifier.predict(X_test)
print(y_pred)
print(y_test)
from sklearn.metrics import confusion_matrix, accuracy_score
cm = confusion_matrix(y_test, y_pred)
print(cm)
accuracy_score(y_test, y_pred)
***********************
VISUAL
import pandas as pd
import seaborn as sb
import matplotlib.pyplot as plt
iris_d = sb.load_dataset("iris")
iris_d.head()
iris_d.shape
plt.scatter(iris_d['petal_length'],iris_d['petal_width'], color='red')
plt.title("scatter plot")
plt.xlabel("petal length")
plt.ylabel("petal width")
plt.show()
plt.hist(iris_d['sepal_width'], bins=20)
plt.title("Histogram")
plt.xlabel("Sepal width")
plt.ylabel("Frequency")
plt.show()
plt.hist(iris_d['petal_width'], bins=15)
plt.title("Histogram")
plt.xlabel("Petal width")
plt.ylabel("Frequency")
plt.show()
sb.boxplot(x="sepal_width", data=iris_d)
plt.title("Box Plot")
sb.boxplot(x="sepal_length", data=iris_d)
plt.title("Box Plot")
******************************
CLUSTER
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
dataset = pd.read_csv('Mall_Customers.csv')
X = dataset.iloc[:, [3, 4]].values
X
import scipy.cluster.hierarchy as sch
dendrogram = sch.dendrogram(sch.linkage(X, method = 'ward'))
plt.title('Dendrogram')
plt.xlabel('Customers')
plt.ylabel('Euclidean distances')
plt.show()
from sklearn.cluster import AgglomerativeClustering
hc = AgglomerativeClustering(n_clusters = 5, affinity = 'euclidean', linkage = 'ward')
y_hc = hc.fit_predict(X)
plt.scatter(X[y_hc == 0, 0], X[y_hc == 0, 1], s = 100, c = 'red', label = 'Cluster 1')
plt.scatter(X[y_hc == 1, 0], X[y_hc == 1, 1], s = 100, c = 'blue', label = 'Cluster 2')
plt.scatter(X[y_hc == 2, 0], X[y_hc == 2, 1], s = 100, c = 'green', label = 'Cluster 3')
plt.scatter(X[y_hc == 3, 0], X[y_hc == 3, 1], s = 100, c = 'cyan', label = 'Cluster 4')
plt.scatter(X[y_hc == 4, 0], X[y_hc == 4, 1], s = 100, c = 'magenta', label = 'Cluster 5')
plt.title('Clusters of customers')
plt.xlabel('Annual Income (k$)')
plt.ylabel('Spending Score (1-100)')
plt.legend()
plt.show()
***************************
APRIORI
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
dataset = pd.read_csv('Market_Basket_Optimisation.csv', header = None)
transactions = []
for i in range(0, 7501):
  transactions.append([str(dataset.values[i,j]) for j in range(0, 20)])
dataset
transactions
!pip install apyori
from apyori import apriori
rules = apriori(transactions = transactions, min_support = 0.003, min_confidence = 0.2)
results = list(rules)
results
********************************************************************
select p.productname,  t.quarter, b.branchname, sum(s.total_sales) as 'total sales', sum(s.total_profit) as 'profit' 
from product p, sales s, time t, branch b
where p.productid= s.prod_id and t.timeid = s.timeid and b.branchid = s.branchid
group by p.productname, t.quarter, b.branchname

select p.productname, sum(s.total_sales) as 'total sales', t.quarter, b.branchname
from product p, sales s, time t, branch b
where p.productid= s.prod_id and t.timeid = s.timeid and b.branchid = s.branchid and quarter=2
group by p.productname, t.quarter, b.branchname

select p.productname, sum(s.total_sales) as 'total sales', t.quarter, b.branchname
from product p, sales s, time t, branch b
where p.productid= s.prod_id and t.timeid = s.timeid and b.branchid = s.branchid and quarter=2 and b.branchid=2
group by p.productname, t.quarter, b.branchname

select t.year, sum(s.total_sales) as 'total sales'
from sales s, time t
where t.timeid = s.timeid 
group by t.year

select t.year, sum(s.total_sales) as 'total sales'
from sales s, time t
where t.timeid = s.timeid 
group by t.year


select t.month, sum(s.total_sales) as 'total sales'
from sales s, time t
where t.timeid = s.timeid 
group by t.month
